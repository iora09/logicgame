
Database {

	// We are defining the Lext set of the LPS Framework
	Facts {
		isIn(2, 0).
	}

	// We are defining the Lint set of the LPS Framework
	Rules {
		floor(2, 0).
		floor(3, 0).
		floor(4, 0).
		floor(5, 0).
		floor(6, 0).
		floor(7, 0).
		floor(8, 0).
		floor(9, 0).
		floor(9, m1).
		floor(9, m2).
		floor(9, m3).
		floor(9, m4).
		floor(10, m4).
		floor(11, m4).
		floor(12, m4).
		floor(13, m4).
		floor(14, m4).
		floor(15, m4).
		floor(16, m4).

        isNext(m3,m4).isNext(m2,m3).isNext(m1,m2).isNext(0,m1).isNext(0,1).isNext(1,2).isNext(2,3).isNext(3,4).isNext(4,5).isNext(5,6).isNext(6,7).isNext(7,8).isNext(8,9).isNext(9,10).isNext(10,11).isNext(11,12).isNext(12,13).isNext(13,14).isNext(14,15).isNext(15,16).
        isNext(m4,m3).isNext(m3,m2).isNext(m2,m1).isNext(m1,0).isNext(1,0).isNext(2,1).isNext(3,2).isNext(4,3).isNext(5,4).isNext(6,5).isNext(7,6).isNext(8,7).isNext(9,8).isNext(10,9).isNext(11,10).isNext(12,11).isNext(13,12).isNext(14,13).isNext(15,14).isNext(16,15).

	}

}

// We are defining the domain theory of the LPS Framework
DSet {
	moveFromTo(A, B, X, Y) = {
		Preconditions [
			conditions: isIn(A, B).
			conflicts: !moveFromTo(A, B, A, Z) & !moveFromTo(A, B, R, Y) & !moveFromTo(A, B, S, T).
		]
		Postconditions [
			initiates(moveFromTo(A, B, X, Y), isIn(X, Y)).
			terminates(moveFromTo(A, B, X, Y), isIn(A, B)).
		]
	}

}

// We are defining the reactive rules of the LPS Framework
ReactiveRules {
  isIn(X, Y) & floor(X, Z) & isNext(Y,Z) -> goFromTo(X, Y, X, Z).
  isIn(X, Y) & floor(Z, Y) & isNext(X,Z) -> goFromTo(X, Y, Z, Y).
}

// We are defining the goals' definitions of the LPS Framework
Goals {
	goFromTo(A, B, X, Y) :- moveFromTo(A, B, X, Y).
}

// We are defining the initial events of the LPS Framework
Events {

}
