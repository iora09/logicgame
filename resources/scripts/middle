
        //WORLD DESC ADDED PROGRAMATICALLY

        isNext(0,1).isNext(1,2).isNext(2,3).isNext(3,4).isNext(4,5).isNext(5,6).isNext(6,7).isNext(7,8).isNext(8,9).isNext(9,10).isNext(10,11).isNext(11,12).isNext(12,13).isNext(13,14).isNext(14,15).isNext(15,16).isNext(16,17).isNext(17,18).isNext(18,19).isNext(19,20).isNext(20,21).isNext(21,22).isNext(22,23).
        isPrevious(1,0).isPrevious(2,1).isPrevious(3,2).isPrevious(4,3).isPrevious(5,4).isPrevious(6,5).isPrevious(7,6).isPrevious(8,7).isPrevious(9,8).isPrevious(10,9).isPrevious(11,10).isPrevious(12,11).isPrevious(13,12).isPrevious(14,13).isPrevious(15,14).isPrevious(16,15).isPrevious(17,16).isPrevious(18,17).isPrevious(19,18).isPrevious(20,19).isPrevious(21,20).isPrevious(22,21).isPrevious(23,22).
	}
}

DSet {
	moveFromTo(A, B, X, Y) = {
		Preconditions [
			conditions: isIn(A, B) .
			conflicts: !moveFromTo(A, B, A, Z) & !moveFromTo(A, B, R, Y) & !moveFromTo(A, B, S, T).
		]
		Postconditions [
            initiates(moveFromTo(A, B, X, Y), isIn(X, Y)).
            //initiates(moveFromTo(A, B, X, Y), north(X,P)).
            //initiates(moveFromTo(A, B, X, Y), south(X,N)).
            //initiates(moveFromTo(A, B, X, Y), west(M,Y)).
            //initiates(moveFromTo(A, B, X, Y), east(Q,Y)).
            terminates(moveFromTo(A, B, X, Y), isIn(A, B)).
            //terminates(moveFromTo(A, B, X, Y), north(A,E)).
            //terminates(moveFromTo(A, B, X, Y), south(A,G)).
            //terminates(moveFromTo(A, B, X, Y), west(F,B)).
            //terminates(moveFromTo(A, B, X, Y), east(H,B)).
		]
	}

    setLights(Y) = {
      Postconditions [
          initiates(setLights(Y), lights(Y)).
          terminates(setLights(Y), lights(X)).
      ]
    }

    deleteLight(X, Y) = {
        Postconditions [
            terminates(deleteLight(X, Y), lightBulb(X, Y)).
        ]
    }

    excludeAll() = {
        Preconditions [
            conflicts: !moveFromTo(A, B, C, D) & !setLights(E) & !deleteLight(F).
        ]
    }

    updateWasIn(X, Y, M, N, P, Q) = {
        Preconditions [
            conditions: isIn(X, Y) & isPrevious(X,M) & isNext(X,Q) & isPrevious(Y,N) & isNext(Y,P).
        ]
        Postconditions [
            initiates(updateWasIn(X, Y, M, N, P, Q), wasIn(X, Y)).
            initiates(updateWasIn(X, Y, M, N, P, Q)), north(X,P)).
            initiates(updateWasIn(X, Y, M, N, P, Q), south(X,N)).
            initiates(updateWasIn(X, Y, M, N, P, Q), west(M,Y)).
            initiates(updateWasIn(X, Y, M, N, P, Q), east(Q,Y)).
            terminates(updateWasIn(X, Y, M, N, P, Q), north(A,E)).
            terminates(updateWasIn(X, Y, M, N, P, Q), south(A,G)).
            terminates(updateWasIn(X, Y, M, N, P, Q), west(F,B)).
            terminates(updateWasIn(X, Y, M, N, P, Q), east(H,B)).
            terminates(updateWasIn(X, Y, M, N, P, Q), wasIn(A, B)).
        ]
    }

}

ReactiveRules {

    isIn(X,Y) & lightBulb(X,Y) -> stepOnLight().
    isIn(X,Y) & lightBulb(X,Y) -> pickUpLight().
    isIn(X,Y) -> triggerUpdateWasIn(). // Always update was in

    //isIn(X, Y) & nextMacro(X, Y) & macro(M) & isNext(M, N)
    // RULES ARE DEFINED BY FINAL USER

